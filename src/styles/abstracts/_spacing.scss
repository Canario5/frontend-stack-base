@use 'utopia-core-scss/src/utopia' as utopia;
@use './functions' as fn;
@use './variables' as vars;
@use 'sass:string';

// SPACING (in px)
$spacing-sizes: (4, 8, 12, 16, 20, 24, 32, 40, 48, 56, 64, 80, 96, 128, 160, 192, 224, 256);

//* HOW TO USE: //
// Just use ass classic css var
// padding: var(--size-4) var(--size-48) var(--size-16) var(--size-128);

:root {
  @each $size in $spacing-sizes {
    $min-size: $size * 0.7;
    $max-size: $size;

    --size-#{$size}: #{string.unquote(
        utopia.calculateClamp(
          (
            'minWidth': fn.strip-unit(vars.$site-min-width),
            'maxWidth': fn.strip-unit(vars.$site-max-width),
            'minSize': $min-size,
            'maxSize': $max-size,
            'usePx': false,
          )
        )
      )};
  }
}

//* HOW TO USE:
// import in file with @use '../abstracts/spacing' as space;
// padding-right: space.range(minValuePx, maxValuePx); -> padding-right: space.range(8, 16);
// padding-right: space.range(minValuePx, maxValuePx, fromWidth, toWidth); -> padding-right: space.range(8, 16, 320px, 1440px);
//

@function range($min-size, $max-size, $min-width: vars.$site-min-width, $max-width: vars.$site-max-width) {
  @return string.unquote(
    utopia.calculateClamp(
      (
        'minWidth': fn.strip-unit($min-width),
        'maxWidth': fn.strip-unit($max-width),
        'minSize': $min-size,
        'maxSize': $max-size,
        'usePx': false,
      )
    )
  );
}
